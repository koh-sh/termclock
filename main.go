package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"strings"
	"time"
)

const version = "v0.1.0"

type numAa [][]string

func NewNumAa(n int) numAa {
	// note: sed -e 's/ /" ",/g' -e 's/#/"#",/g' -e 's/^/{/g' -e 's/,$/},/g'
	switch n {
	case 1:
		return numAa{
			{" ", " ", " ", "#", " ", " ", " ", " "},
			{" ", " ", "#", "#", " ", " ", " ", " "},
			{" ", "#", " ", "#", " ", " ", " ", " "},
			{" ", " ", " ", "#", " ", " ", " ", " "},
			{" ", " ", " ", "#", " ", " ", " ", " "},
			{" ", " ", " ", "#", " ", " ", " ", " "},
			{" ", "#", "#", "#", "#", "#", " ", " "},
		}
	case 2:
		return numAa{
			{" ", "#", "#", "#", "#", "#", " ", " "},
			{"#", " ", " ", " ", " ", " ", "#", " "},
			{" ", " ", " ", " ", " ", " ", "#", " "},
			{" ", "#", "#", "#", "#", "#", " ", " "},
			{"#", " ", " ", " ", " ", " ", " ", " "},
			{"#", " ", " ", " ", " ", " ", " ", " "},
			{"#", "#", "#", "#", "#", "#", "#", " "},
		}
	case 3:
		return numAa{
			{" ", "#", "#", "#", "#", "#", " ", " "},
			{"#", " ", " ", " ", " ", " ", "#", " "},
			{" ", " ", " ", " ", " ", " ", "#", " "},
			{" ", "#", "#", "#", "#", "#", " ", " "},
			{" ", " ", " ", " ", " ", " ", "#", " "},
			{"#", " ", " ", " ", " ", " ", "#", " "},
			{" ", "#", "#", "#", "#", "#", " ", " "},
		}
	case 4:
		return numAa{
			{"#", " ", " ", " ", " ", " ", " ", " "},
			{"#", " ", " ", " ", " ", "#", " ", " "},
			{"#", " ", " ", " ", " ", "#", " ", " "},
			{"#", " ", " ", " ", " ", "#", " ", " "},
			{"#", "#", "#", "#", "#", "#", "#", " "},
			{" ", " ", " ", " ", " ", "#", " ", " "},
			{" ", " ", " ", " ", " ", "#", " ", " "},
		}
	case 5:
		return numAa{
			{"#", "#", "#", "#", "#", "#", "#", " "},
			{"#", " ", " ", " ", " ", " ", " ", " "},
			{"#", " ", " ", " ", " ", " ", " ", " "},
			{"#", "#", "#", "#", "#", "#", " ", " "},
			{" ", " ", " ", " ", " ", " ", "#", " "},
			{"#", " ", " ", " ", " ", " ", "#", " "},
			{" ", "#", "#", "#", "#", "#", " ", " "},
		}
	case 6:
		return numAa{
			{" ", "#", "#", "#", "#", "#", " ", " "},
			{"#", " ", " ", " ", " ", " ", "#", " "},
			{"#", " ", " ", " ", " ", " ", " ", " "},
			{"#", "#", "#", "#", "#", "#", " ", " "},
			{"#", " ", " ", " ", " ", " ", "#", " "},
			{"#", " ", " ", " ", " ", " ", "#", " "},
			{" ", "#", "#", "#", "#", "#", " ", " "},
		}
	case 7:
		return numAa{
			{"#", "#", "#", "#", "#", "#", "#", " "},
			{"#", " ", " ", " ", " ", "#", " ", " "},
			{" ", " ", " ", " ", "#", " ", " ", " "},
			{" ", " ", " ", "#", " ", " ", " ", " "},
			{" ", " ", "#", " ", " ", " ", " ", " "},
			{" ", " ", "#", " ", " ", " ", " ", " "},
			{" ", " ", "#", " ", " ", " ", " ", " "},
		}
	case 8:
		return numAa{
			{" ", "#", "#", "#", "#", "#", " ", " "},
			{"#", " ", " ", " ", " ", " ", "#", " "},
			{"#", " ", " ", " ", " ", " ", "#", " "},
			{" ", "#", "#", "#", "#", "#", " ", " "},
			{"#", " ", " ", " ", " ", " ", "#", " "},
			{"#", " ", " ", " ", " ", " ", "#", " "},
			{" ", "#", "#", "#", "#", "#", " ", " "},
		}
	case 9:
		return numAa{
			{" ", "#", "#", "#", "#", "#", " ", " "},
			{"#", " ", " ", " ", " ", " ", "#", " "},
			{"#", " ", " ", " ", " ", " ", "#", " "},
			{" ", "#", "#", "#", "#", "#", "#", " "},
			{" ", " ", " ", " ", " ", " ", "#", " "},
			{"#", " ", " ", " ", " ", " ", "#", " "},
			{" ", "#", "#", "#", "#", "#", " ", " "},
		}
	case 0:
		return numAa{
			{" ", " ", "#", "#", "#", " ", " ", " "},
			{" ", "#", " ", " ", " ", "#", " ", " "},
			{"#", " ", " ", " ", " ", " ", "#", " "},
			{"#", " ", " ", " ", " ", " ", "#", " "},
			{"#", " ", " ", " ", " ", " ", "#", " "},
			{" ", "#", " ", " ", " ", "#", " ", " "},
			{" ", " ", "#", "#", "#", " ", " ", " "},
		}
	default: // colon
		return numAa{
			{" ", " ", " ", " ", " "},
			{" ", " ", "#", " ", " "},
			{" ", " ", "#", " ", " "},
			{" ", " ", " ", " ", " "},
			{" ", " ", "#", " ", " "},
			{" ", " ", "#", " ", " "},
			{" ", " ", " ", " ", " "},
		}
	}
}

func (na numAa) join() string {
	var s string
	for i := 0; i < len(na); i++ {
		r := strings.Join(na[i], "")
		s += r + "\n"
	}
	return s
}

func (na numAa) merge(na1 numAa) numAa {
	for i := 0; i < len(na); i++ {
		na[i] = append(na[i], na1[i]...)
	}
	return na
}

func main() {
	v := flag.Bool("version", false, "Show version")
	ns := flag.Bool("nosec", false, "Not print second on the clock")
	t := flag.String("timezone", "", "Specify timezone \nEx) Asia/Tokyo")
	flag.Parse()

	if *v {
		fmt.Printf("%s %s\n", os.Args[0], version)
		os.Exit(0)
	}

	if *t != "" {
		tz, err := time.LoadLocation(*t)
		if err != nil {
			log.Fatal(err)
		}
		time.Local = tz
	}

	fmt.Println("")
	for {
		now := time.Now()
		h1 := NewNumAa(now.Hour() / 10)
		h2 := NewNumAa(now.Hour() % 10)
		m1 := NewNumAa(now.Minute() / 10)
		m2 := NewNumAa(now.Minute() % 10)
		colon := NewNumAa(10) // colon
		h1.merge(h2).merge(colon).merge(m1).merge(m2)
		if !*ns {
			s1 := NewNumAa(now.Second() / 10)
			s2 := NewNumAa(now.Second() % 10)
			h1.merge(colon).merge(s1).merge(s2)
		}
		fmt.Printf("%s\033[%dA", h1.join(), len(h1))
		time.Sleep(time.Second)
	}
}
